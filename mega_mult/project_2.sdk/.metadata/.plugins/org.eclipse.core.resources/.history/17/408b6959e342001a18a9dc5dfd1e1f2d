/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <assert.h>
#include <stdint.h>

#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_io.h"

#define BASE_ADDR 0x43C00000
#define HIGH_ADDR 0x43C0FFFF
#define RESET_ADDR 0x43C0004
#define MULT_REG0_OFFSET 0
#define MULT_REG1_OFFSET 4 //reset offset


//helper functions
uint32_t high16(uint32_t num) { return num >> 16; }
uint32_t low16(uint32_t num) { return num & 0xffff; }

//Prototypes
void mult_write(uint32_t addr, uint32_t offset, uint32_t value);
uint32_t mult_read(uint32_t addr, uint32_t offset);
uint64_t read_int();
uint64_t mega_mult(uint32_t a, uint32_t b);




int main()
{
    init_platform();

    // this puts 3 into the high-order 16 bits, and 2 into the low-order 16 bits
    	// 0x00030002 or 196610 also works.
    	uint32_t six      	= 3 << 16 | 2; // should result in 6
    	uint32_t sixteen  	= 4 << 16 | 4; // should result in 16
    	uint32_t result;

    uint32_t a;
    uint32_t b;
    uint32_t input;
    uint64_t mega_result;



    //First Test
    //Write a single unsigned 32-bit number into reg0
    // this is interpreted by Verilog as two 16-bit numbers)
    //mult_write(BASE_ADDR, MULT_REG0_OFFSET, six);
    //Read a single unsigned 32-bit number from reg0
    //result = (uint32_t)mult_read(BASE_ADDR, MULT_REG0_OFFSET);
	//Print results
	//xil_printf("%d * %d = %d\n", high16(six), low16(six), result);
	//assert(result == 6);

	//Second Test
    //mult_write(BASE_ADDR, MULT_REG0_OFFSET, sixteen);
    //result = (uint32_t)mult_read(BASE_ADDR, MULT_REG0_OFFSET);

	//xil_printf("%d * %d = %d\n\n", high16(sixteen), low16(sixteen), result);
	//assert(result == 16);

	xil_printf("Please enter input A: \n");
	a = read_int();


	xil_printf("Please enter input B: \n");
	b = read_int();


	xil_printf("%d * %d\n", a, b);

	mega_result = mega_mult(a, b);

	xil_printf("Result C: %ul\n", mega_result);



    cleanup_platform();
    return 0;
}

void mult_write(uint32_t addr, uint32_t offset, uint32_t value) {
	Xil_Out32(addr + offset, value);
}

uint32_t mult_read(uint32_t addr, uint32_t offset) {
	uint32_t temp = 0;
	temp = Xil_In32(addr + offset);
	return temp;
}

uint64_t read_int()
{
	const int BUF_SIZE = 100;
	char buf [BUF_SIZE];
	int i = 0;
	uint64_t ret;

	for (i = 0; i < BUF_SIZE; ++i){
   	 buf[i] = getchar();

   	 // process the value when we see <enter> characters
   	 if ((buf[i] == '\n') || (buf[i] == '\r')) {
   		 buf[i] = '\0'; // null-terminate our string
   		 uint64_t a;
   		 sscanf( buf, "%llu", &a);
   		 return a;
   	 }
    }

	printf("ERROR:  read_int input too long, assuming 0\n");
	return 0;

}


uint64_t mega_mult(uint32_t a, uint32_t b) {
	uint64_t result_low, result_high;

	mult_write(BASE_ADDR, MULT_REG1_OFFSET, 0x0);

	mult_write(BASE_ADDR, MULT_REG1_OFFSET, 0x1);


	//Write A to �Mega� Multiplier
	mult_write(BASE_ADDR, MULT_REG0_OFFSET, (uint32_t) (a) );
	//result_low = (uint64_t) mult_read(BASE_ADDR, MULT_REG0_OFFSET);

	//Write B to �Mega� Multiplier
	mult_write(BASE_ADDR, MULT_REG0_OFFSET, (uint32_t) (b) );
	//result_high = (uint64_t) mult_read(BASE_ADDR, MULT_REG0_OFFSET);



	//Read 64-bits as 2 32-bit chunks
	//then combine and return
	result_low = (uint64_t) mult_read(BASE_ADDR, MULT_REG0_OFFSET);
	result_high = (uint64_t) mult_read(BASE_ADDR, MULT_REG0_OFFSET);
	return result_high << 32 | result_low;

}

