/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xaxidma.h"

#include <stdint.h>

#define MAX_PKT_LEN      8

uint32_t PING [MAX_PKT_LEN] __attribute__ ((section(".dma_data")));
uint32_t PONG [MAX_PKT_LEN]  __attribute__ ((section(".dma_data")));

XAxiDma AxiDma;


void init_buffer( uint32_t * buf, uint32_t buf_len);
int check_buffer(uint32_t * buf, uint32_t buf_len);

int XAxiDMA_Init(uint16_t DeviceId);
int XAxiDma_TxRxBuffer(uint16_t DeviceId, uint32_t * TxBufferPtr, uint32_t * RxBufferPtr, uint32_t BufferSizeBytes);


int main()
{
    init_platform();

    int Status;

    xil_printf("\r\n--- Entering main() --- \r\n");

    init_buffer(PING, MAX_PKT_LEN);

    Status = XAxiDMA_Init(XPAR_AXIDMA_0_DEVICE_ID);
    Status = XAxiDma_TxRxBuffer(XPAR_AXIDMA_0_DEVICE_ID, PING, PONG, sizeof(PONG));

    Status = check_buffer(PONG, MAX_PKT_LEN);

	if (Status != XST_SUCCESS) {
			printf("XAxiDma_Bitflip Example Failed\r\n");
	} else {
			printf("XAxiDma_Bitflip Example Succeeded\r\n");
	}

	printf("--- Exiting main() --- \r\n");

    cleanup_platform();
    return XST_SUCCESS;

}



void init_buffer( uint32_t * buf, uint32_t buf_len)
{
        uint32_t i;
        xil_printf("Initializing Buffer\n");

        for( i=0; i < buf_len; i++){
                buf[i] = i;
        }

}


int check_buffer(uint32_t * buf, uint32_t buf_len)
{
	uint32_t i;
	xil_printf("Checking Buffer\n");

	for(i=0; i < buf_len; i++){
		if (buf[i] != (~i)){
			xil_printf("Data Error: %d, Actual: %x, Expected: %x\r\n", i, buf[i], (~i));
			return XST_FAILURE;
		}
	}
	return XST_SUCCESS;
}

int XAxiDMA_Init(uint16_t DeviceId)
{
        XAxiDma_Config *CfgPtr;
        int Status;

        xil_printf("Initializing DMA\n");

        CfgPtr = XAxiDma_LookupConfig(DeviceId);
        if (!CfgPtr) {
                xil_printf("No config found for %d\r\n", DeviceId);
                return XST_FAILURE;
        }

        Status = XAxiDma_CfgInitialize(&AxiDma, CfgPtr);
        if (Status != XST_SUCCESS) {
                xil_printf("Initialization failed %d\r\n", Status);
                return XST_FAILURE;
        }

        if(XAxiDma_HasSg(&AxiDma)){
                xil_printf("Device configured as SG mode \r\n");
                return XST_FAILURE;
        }

        /* Disable interrupts, we use polling mode
         */
        XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
                                                XAXIDMA_DEVICE_TO_DMA);
        XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
                                                XAXIDMA_DMA_TO_DEVICE);

        return XST_SUCCESS;

}

int XAxiDma_TxRxBuffer(
                        uint16_t DeviceId,
                        uint32_t * TxBufferPtr,
                        uint32_t * RxBufferPtr,
                        uint32_t BufferSizeBytes)
{

        int Status;

        xil_printf("Running DMA\n");

        Xil_DCacheFlushRange((UINTPTR)TxBufferPtr, BufferSizeBytes);

        Status = XAxiDma_SimpleTransfer(&AxiDma,(UINTPTR) RxBufferPtr,
        						BufferSizeBytes, XAXIDMA_DEVICE_TO_DMA);

        if (Status != XST_SUCCESS) {
                return XST_FAILURE;
        }

        Status = XAxiDma_SimpleTransfer(&AxiDma,(UINTPTR) TxBufferPtr,
        						BufferSizeBytes, XAXIDMA_DMA_TO_DEVICE);

        if (Status != XST_SUCCESS) {
                return XST_FAILURE;
        }

        while ((XAxiDma_Busy(&AxiDma,XAXIDMA_DEVICE_TO_DMA)) ||
                (XAxiDma_Busy(&AxiDma,XAXIDMA_DMA_TO_DEVICE))) {
                        /* Wait */
        }

        Xil_DCacheFlushRange((UINTPTR)RxBufferPtr, BufferSizeBytes);


        return XST_SUCCESS;
}

